/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.belgiplast.utilities.tests.module1.test1;

import be.belgiplast.netbeans.utilities.relationships.ui.nodes.NamespaceNode;
import be.belgiplast.utilities.namespaces.DynamicName;
import be.belgiplast.utilities.namespaces.DynamicNamespace;
import be.belgiplast.utilities.namespaces.Namespace;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//be.belgiplast.utilities.tests.module1.test1//Test1//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "Test1TopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "be.belgiplast.utilities.tests.module1.test1.Test1TopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_Test1Action",
        preferredID = "Test1TopComponent"
)
@Messages({
    "CTL_Test1Action=Test1",
    "CTL_Test1TopComponent=Test1 Window",
    "HINT_Test1TopComponent=This is a Test1 window"
})
public final class Test1TopComponent extends TopComponent implements ExplorerManager.Provider{

    private ExplorerManager mgr = new ExplorerManager();
    
    public Test1TopComponent() {
        mgr.setRootContext((Node)getNode());
        initComponents();        
        setName(Bundle.CTL_Test1TopComponent());
        setToolTipText(Bundle.HINT_Test1TopComponent());

    }
    
    public ExplorerManager getExplorerManager() {
        return mgr;
    }
    
    private Namespace createModel(){
        DynamicNamespace dn = new DynamicNamespace("root");
        dn.addName(new DynamicName("name1",dn));
        dn.addName(new DynamicName("name2",dn));
        
        return dn;
    }
    
    private NamespaceNode getNode(){
        Namespace ns = createModel();
        NamespaceNode result = new NamespaceNode(ns);
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new OutlineView();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setLeftComponent(jScrollPane1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
